package astah.plugin;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

import com.change_vision.jude.api.inf.exception.InvalidUsingException;
import com.change_vision.jude.api.inf.model.INamedElement;
import com.change_vision.jude.api.inf.presentation.IPresentation;
import com.change_vision.jude.api.inf.project.ModelFinder;
import com.change_vision.jude.api.inf.project.ProjectAccessor;
import com.change_vision.jude.api.inf.project.ProjectAccessorFactory;
import com.change_vision.jude.api.inf.project.ProjectEvent;
import com.change_vision.jude.api.inf.project.ProjectEventListener;
import com.change_vision.jude.api.inf.ui.IPluginExtraTabView;
import com.change_vision.jude.api.inf.ui.ISelectionListener;
import com.change_vision.jude.api.inf.view.IDiagramViewManager;

public class BookmarksView extends JPanel implements IPluginExtraTabView,
		ProjectEventListener, ActionListener {

	/*
	 * Construct
	 */
	private static final long serialVersionUID = 4238629225058482667L;

	private static final int COLUMN_DESCRIPTION = 0;
	private static final int COLUMN_DIAGRAM_NAME = 1;
	private static final int COLUMN_PRESENTATION_NAME = 2;
	private static final int COLUMN_CLASS_ID = 3;
	private static final int ROW_HEIGHT = 22;

	private static final String COMMAND_ADD_BOOKMARKS = "CommandAddBookmarks";
	private static final String COMMAND_REMOVE_BOOKMARKS = "CommandRemoveBookmarks";
	
	private static final String DEVIDE_STRING = ";";

	/*
	 * member
	 */
	private JTable table;
	private DefaultTableModel tableModel;
	private JScrollPane scroller;

	/*
	 * Constructor
	 */
	public BookmarksView() {
		initComponents();
		addProjectEventListener();
	}

	/*
	 * Memberã€€Function
	 */
	private void initComponents() {
		setLayout(new BorderLayout());

		/*
		 * create grid view
		 */
		{
			initTable();
			add(this.scroller, BorderLayout.CENTER);
		}

		/*
		 * create buttons and set event
		 */
		{
			JPanel panelButton = new JPanel();
			panelButton.setLayout(new GridLayout(2, 1));

			JButton buttonAddBookmarks = new JButton("Add...");
			buttonAddBookmarks.addActionListener(this);
			buttonAddBookmarks.setActionCommand(COMMAND_ADD_BOOKMARKS);
			panelButton.add(buttonAddBookmarks);

			JButton buttonRemoveBookmarks = new JButton("Remove...");
			buttonRemoveBookmarks.addActionListener(this);
			buttonRemoveBookmarks.setActionCommand(COMMAND_REMOVE_BOOKMARKS);
			panelButton.add(buttonRemoveBookmarks);

			add(panelButton, BorderLayout.WEST);
		}
		
	}
	
	private void initTable(){
        tableModel = new DefaultTableModel() {
			private static final long serialVersionUID = 4018704917650343203L;

			@Override
			public boolean isCellEditable(int rowIndex, int columnIndex) {
                if (columnIndex == COLUMN_DESCRIPTION)
                    return true;
                return false;
            }
        };

        tableModel.addColumn("Description");
        tableModel.addColumn("Diagram");
        tableModel.addColumn("Presentation");
        tableModel.addColumn("ClassID");

        table = new JTable(tableModel);
        table.setRowHeight(ROW_HEIGHT);
        table.removeColumn(table.getColumnModel().getColumn(COLUMN_CLASS_ID));
        table.setSurrendersFocusOnKeystroke(true);
        table.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				clickMouseTable(e);
			}
		});
        
        table.addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent e) {
				keyPressedTable(e);
			}
		});
        
        this.scroller = new JScrollPane(table);
	}

    private void addProjectEventListener() {
		try {
			ProjectAccessor projectAccessor = ProjectAccessorFactory
					.getProjectAccessor();
			projectAccessor.addProjectEventListener(this);
		} catch (ClassNotFoundException e) {
			e.getMessage();
		}
	}
	
    private void refreshTable(){
        table.removeEditor();
        table.clearSelection();
        table.repaint();
    }

	private void clearTableData(){
		for(int i = this.tableModel.getRowCount() - 1; i >= 0; i--){
			this.tableModel.removeRow(i);
		}
		
		refreshTable();
	}

    private boolean addBookmarks(){
		try {
			List<IPresentation> selectedPresentationList = new ArrayList<IPresentation>();
			
			// Get Selected Presentation
			{
				ProjectAccessor projectAccessor = ProjectAccessorFactory.getProjectAccessor();
				IPresentation[] presentation = projectAccessor.getViewManager().getDiagramViewManager().getSelectedPresentations();
				if(presentation != null){
					for(int i = 0; i < presentation.length; i++){
						selectedPresentationList.add(presentation[i]);
					}
				}
			}
			
			if(selectedPresentationList.size() <= 0){
				return false;
			}
			
			// create table data
			String description = "";
			String diagramName = "";
			String presentationName = "";
			String classID = "";
			{
				for(int i = 0; i < selectedPresentationList.size(); i++){
					if(diagramName.equals("") && selectedPresentationList.get(i).getDiagram() != null){
						diagramName = selectedPresentationList.get(i).getDiagram().getName();
					}
					if(presentationName.equals("") && selectedPresentationList.get(i).getLabel() != null && !selectedPresentationList.get(i).getLabel().equals("")){
						presentationName = selectedPresentationList.get(i).getLabel();
					}
					classID += DEVIDE_STRING + selectedPresentationList.get(i).getID();
				}
				classID = classID.substring(DEVIDE_STRING.length());
				if (selectedPresentationList.size() > 1){
					presentationName += " + etc";
				}
				description = diagramName + " - " + presentationName;
			}

			// add Row Data
			{
				tableModel.setNumRows(tableModel.getRowCount() + 1);
				
		        table.getModel().setValueAt(description, tableModel.getRowCount() - 1, COLUMN_DESCRIPTION);
		        table.getModel().setValueAt(diagramName, tableModel.getRowCount() - 1, COLUMN_DIAGRAM_NAME);
		        table.getModel().setValueAt(presentationName, tableModel.getRowCount() - 1, COLUMN_PRESENTATION_NAME);
		        table.getModel().setValueAt(classID, tableModel.getRowCount() - 1, COLUMN_CLASS_ID);
			}
			
			// refresh view
			{
				refreshTable();	        
		        table.setRowSelectionInterval(this.tableModel.getRowCount() - 1, this.tableModel.getRowCount() - 1);
			}
	        
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		
		// save bookmarks data
		saveBookmarks();

		return true;
    }
    
    private void removeBookmarks(){
		if (table.getSelectedRowCount() <= 0){
			return;
		}
		
		for(int idx: table.getSelectedRows()){
			this.tableModel.setValueAt("", idx, COLUMN_CLASS_ID);
		}

		for(int i = this.tableModel.getRowCount() - 1; i >= 0; i--){
			if(this.tableModel.getValueAt(i, COLUMN_CLASS_ID).toString().equals("")){
				this.tableModel.removeRow(i);
			}
		}
		
		// refresh view
		refreshTable();

		// save bookmarks data
		saveBookmarks();
    }

    private void swapBookmark(boolean isTowardDown) {
		if(this.table.getSelectedRowCount() == 0){
			return;
		} else if (isTowardDown && (this.table.getSelectedRow() >= this.table.getRowCount() - 1)){
			return;
		} else if (!isTowardDown && (this.table.getSelectedRow() <= 0)){
			return;
		}
		
		if(isTowardDown){
			tableModel.moveRow(this.table.getSelectedRow(), this.table.getSelectedRow(), this.table.getSelectedRow() + 1);
			this.table.setRowSelectionInterval(this.table.getSelectedRow() + 1, this.table.getSelectedRow() + 1);
		}else{
			tableModel.moveRow(this.table.getSelectedRow(), this.table.getSelectedRow(), this.table.getSelectedRow() - 1);
			this.table.setRowSelectionInterval(this.table.getSelectedRow() - 1, this.table.getSelectedRow() - 1);
		}

		// save bookmarks data
		saveBookmarks();
	}

	private void changeSelectBookmark(boolean isTowardDown) {
		if(this.table.getSelectedRowCount() == 0){
			return;
		} else if (isTowardDown && (this.table.getSelectedRow() >= this.table.getRowCount() - 1)){
			return;
		} else if (!isTowardDown && (this.table.getSelectedRow() <= 0)){
			return;
		}
		
		if(isTowardDown){
			this.table.setRowSelectionInterval(this.table.getSelectedRow() + 1, this.table.getSelectedRow() + 1);
		}else{
			this.table.setRowSelectionInterval(this.table.getSelectedRow() - 1, this.table.getSelectedRow() - 1);
		}
		selectPresentation(this.table.getModel().getValueAt(this.table.getSelectedRow(), COLUMN_CLASS_ID).toString());
	}
	
	private void showSelectedRow(){
		this.table.scrollRectToVisible(this.table.getCellRect(this.table.getSelectedRow(), COLUMN_DESCRIPTION, true));
	}

	private void selectPresentation(String classID){

		String[] classIdList = classID.split(DEVIDE_STRING);
		final HashMap<String, IPresentation> presentationMap = new HashMap<String, IPresentation>();
		final ArrayList<IPresentation> selectPresentation = new ArrayList<IPresentation>();
		
		for(int i = 0; i < classIdList.length; i++){
			presentationMap.put(classIdList[i], null);
		}
		
		try{
			ProjectAccessor projectAccessor = ProjectAccessorFactory.getProjectAccessor();
			projectAccessor.findElements(new ModelFinder() {
				@Override
				public boolean isTarget(INamedElement arg0) {
					boolean ret = false;
					try {
						for(IPresentation pre : arg0.getPresentations()){
							if(presentationMap.containsKey(pre.getID())){
								selectPresentation.add(pre);
								ret = true;
								break;
							}
						}
					} catch (InvalidUsingException e) {
						e.printStackTrace();
					}
					return ret;
				}
			});
			
			if (selectPresentation.size() > 0)	{
				IDiagramViewManager dvm = projectAccessor.getViewManager().getDiagramViewManager();
				dvm.open(selectPresentation.get(0).getDiagram());
				dvm.showInDiagramEditor(selectPresentation.get(0));
				dvm.select(selectPresentation.toArray(new IPresentation[0]));
			} else {
				// not exist presentation
				JOptionPane.showMessageDialog(this, "Not Found!");
			}

		}catch(Exception exp){
			exp.printStackTrace();
		}
	}
    
	private void loadBookmarks(){

		clearTableData();
		
		String[][] bookmarkData = BookmarksUtility.getIncetance().loadBookmarks();
		for(String rowData[] : bookmarkData){
			this.tableModel.addRow(rowData);
		}

		refreshTable();
	}
	
    private void saveBookmarks(){
    	BookmarksUtility.getIncetance().saveBookmarks(this.tableModel);
    }
	
	/*
	 * Event
	 */
	private void clickButtonAddBookmarks(){
		if(this.addBookmarks()){
			showSelectedRow();
			this.table.editCellAt(this.table.getSelectedRow(), COLUMN_DESCRIPTION);
	        table.getEditorComponent().requestFocus();
	        ((JTextField)table.getEditorComponent()).selectAll();  
		}
	}

	private void clickButtonRemoveBookmarks(){
		this.removeBookmarks();
	}
	
	private void clickMouseTable(MouseEvent e){
		if(this.table == null)
			return;

		Point pt = e.getPoint();
		int idx = this.table.rowAtPoint(pt);
		selectPresentation(this.table.getModel().getValueAt(idx, COLUMN_CLASS_ID).toString());
		this.table.requestFocus();
	}

	private void keyPressedTable(KeyEvent e) {
		switch(e.getKeyCode()){
		
		case KeyEvent.VK_DOWN:
			if(e.isControlDown()){
				swapBookmark(true);
			}else{
				changeSelectBookmark(true);
				this.table.requestFocus();
			}
			showSelectedRow();
			e.consume();
			break;

		case KeyEvent.VK_UP:
			if(e.isControlDown()){
				swapBookmark(false);
			}else{
				changeSelectBookmark(false);
				this.table.requestFocus();
			}
			showSelectedRow();
			e.consume();
			break;
		
		case KeyEvent.VK_ENTER:
			if(this.table.getSelectedRowCount() > 0){
				this.table.editCellAt(this.table.getSelectedRow(), COLUMN_DESCRIPTION);
		        table.getEditorComponent().requestFocus();
		        ((JTextField)table.getEditorComponent()).selectAll();  
				e.consume();
			}
			break;

		default:
			break;
		}
	}

	/*
	 * Override
	 */
	@Override
	public void projectChanged(ProjectEvent arg0) {
	}

	@Override
	public void projectClosed(ProjectEvent arg0) {
		clearTableData();
		
		BookmarksUtility.reset();
	}

	@Override
	public void projectOpened(ProjectEvent arg0) {
		loadBookmarks();
	}

	@Override
	public void activated() {
	}

	@Override
	public void addSelectionListener(ISelectionListener arg0) {
	}

	@Override
	public void deactivated() {
	}

	@Override
	public Component getComponent() {
		return this;
	}

	@Override
	public String getDescription() {
		return "Bookmarks";
	}

	@Override
	public String getTitle() {
		return "Bookmarks";
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if(e.getActionCommand().equals(COMMAND_ADD_BOOKMARKS)){
			this.clickButtonAddBookmarks();
		}else if(e.getActionCommand().equals(COMMAND_REMOVE_BOOKMARKS)){
			this.clickButtonRemoveBookmarks();
		}
	}
	
}
